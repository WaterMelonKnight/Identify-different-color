var _config = {
	color: {
		allTime: 60,
		addTime: 0,
		lvMap: [2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9]
	}
};

(function() {
	var a = $("#box"),
		b = {
			lv: $("#room .lv em"),
			time: $("#room .time"),
			start: $("#dialog .btn-restart"),
			pause: $("#room .btn-pause"),
			resume: $("#dialog .btn-resume"),
			dialog: $("#dialog"),
			d_content: $("#dialog .content"),
			d_pause: $("#dialog .pause"),
			d_gameover: $("#dialog .gameover")
		},
		c = {
			init: function(a, b, c) {
				this.type = a;
				this.api = API[a];
				this.config = _config[a];
				this.reset();
				this.parent = c;
				this.el = b;
				this.renderUI();
				this.inited || this.initEvent();
				this.inited = !0;
				this.start();
			},
			renderUI: function() {
				var b = 90 == window.orientation || -90 == window.orientation,
					c = b ? window.innerHeight : window.innerWidth;
				c -= 20;
				c = Math.min(c, 500);
				a.width(c).height(c);
				this.el.show();
			},
			initEvent: function() {
				var d = "ontouchstart" in document.documentElement ? "touchend" : "click",
					e = this;
				$(window).resize(function() {
					c.renderUI();
				});
				a.on(d, "span", function() {
					var a = $(this).data("type");
					"a" == a && e.nextLv.call(e);
				});
				b.pause.on(d, _.bind(this.pause, this));
				b.resume.on(d, _.bind(this.resume, this));
				b.start.on(d, _.bind(this.start, this));
			},
			start: function() {
				this.time > 5 && b.time.removeClass("danger");
				b.dialog.hide();
				this._pause = !1;
				this.lv = "undefined" != typeof this.lv ? this.lv + 1 : 0;
				this.lvMap = this.config.lvMap[this.lv] || _.last(this.config.lvMap);
				this.renderMap();
				this.renderInfo();
				this.timer || (this.timer = setInterval(_.bind(this.tick, this), 1e3));
			},
			renderMap: function() {
				var b = this.lvMap * this.lvMap,
					c = "",
					d = "lv" + this.lvMap;
				_(b).times(function() {
					c += "<span></span>";
				});
				a.attr("class", d).html(c);
				this.api.render(this.lvMap, this.lv);
			},
			renderInfo: function() {
				b.lv.text(this.lv + 1);
			},
			tick: function() {
				if (this._pause) return;
				this.time--;
				if (this.time < 6) {
					b.time.addClass("danger");
				}
				if (this.time < 0) {
					this.gameOver();
				} else {
					b.time.text(this.time);
				}
			},
			nextLv: function() {
				this.time += this.config.addTime;
				this._pause || this.start();
			},
			pause: function() {
				this._pause = !0;
				b.d_content.hide();
				b.d_pause.show();
				b.dialog.show();
			},
			resume: function() {
				b.dialog.hide();
				this._pause = !1;
			},
			gameOver: function() {
				clearInterval(this.timer);
				b.d_content.hide();
				b.d_gameover.show().find("h3").text("游戏结束");
				a.find("span").fadeOut(1500, function() {
					b.dialog.show();
				});
				this._pause = !0;
				this.reset();
			},
			reset: function() {
				this.time = this.config.allTime;
				this.lv = -1;
			}
		};
	window.Game = c;
})()

(function(a) {
	var b = {
		index: $("#index"),
		room: $("#room"),
		loading: $("#loading"),
		dialog: $("#dialog"),
		play: $(".play-btn")
	},
	d = {
		init: function() {
			this.initEvent();
			this.render();
		},
		render: function() {
			b.loading.hide();
			b.index.show();
		},
		initEvent: function() {
			var a = "ontouchstart" in document.documentElement ? "touchstart" : "click",
				c = this;
			b.play.on(a, function() {
				var a = $(this).data("type") || "color";
				b.index.hide();
				Game.init(a, b.room, c);
			});
		}
	};
	d.init();
	a.API = {};
})(window);

(function() {
	var a = $("#box"),
		b = "span",
		e = {
			render: function(e, f) {
				var g = _config.color.lvMap[f] || _.last(_config.color.lvMap);
				var h = Math.floor(Math.random() * e * e),
					i = this.getColor(255 - 15),
					j = this.getLvColor(i[0]);
				a.find(b).css("background-color", i[1]).data("type", "b");
				a.find(b).eq(h).css({
					"background-color": j[1],
					"transform": "scale(1.05)",
					"transition": "transform 0.3s"
				}).data("type", "a");
			},
			getColor: function(a) {
				var b = [Math.round(Math.random() * a), Math.round(Math.random() * a), Math.round(Math.random() * a)],
					c = "rgb(" + b.join(",") + ")";
				return [b, c];
			},
			getLvColor: function(a) {
				var b = 15,
					c = _.map(a, function(a) {
						return Math.min(255, a + b);
					}),
					d = "rgb(" + c.join(",") + ")";
				return [c, d];
			}
		};
	API.color = e;
})();
