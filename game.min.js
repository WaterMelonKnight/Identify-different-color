class ColorGame {
    constructor() {
        this.config = {
            totalTime: 60,
            timePerLevel: 5,
            levelSteps: [2,3,4,5,5,6,6,7,7,7,8,8,8,8,8,8,9]
        };
        
        this.elements = {
            grid: document.querySelector('.color-grid'),
            level: document.querySelector('.level'),
            timer: document.querySelector('.time-left'),
            overlay: document.querySelector('.overlay'),
            pauseMenu: document.querySelector('.pause-menu'),
            gameOverMenu: document.querySelector('.game-over')
        };
        
        this.initEventListeners();
        this.resetGame();
    }

    initEventListeners() {
        const handler = 'ontouchstart' in window ? 'touchstart' : 'click';
        
        document.querySelector('.start-btn').addEventListener(handler, () => this.startGame());
        document.querySelector('.pause-btn').addEventListener(handler, () => this.togglePause());
        document.querySelector('.resume-btn').addEventListener(handler, () => this.togglePause());
        document.querySelector('.restart-btn').addEventListener(handler, () => this.resetGame());
        
        this.elements.grid.addEventListener(handler, e => {
            if (e.target.classList.contains('color-cell')) {
                this.handleCellClick(e.target);
            }
        });
    }

    startGame() {
        document.querySelector('.start-page').classList.remove('active');
        document.querySelector('.game-page').classList.add('active');
        this.isPaused = false;
        this.currentLevel = 0;
        this.timeLeft = this.config.totalTime;
        this.updateTimerDisplay();
        this.generateGrid();
        this.startTimer();
    }

    generateGrid() {
        const size = this.config.levelSteps[this.currentLevel] || 9;
        const totalCells = size * size;
        const differentIndex = Math.floor(Math.random() * totalCells);
        
        const baseColor = this.generateColor(200);
        const differentColor = this.adjustColor(baseColor, 30);
        
        this.elements.grid.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
        this.elements.grid.innerHTML = '';
        
        for (let i = 0; i < totalCells; i++) {
            const cell = document.createElement('div');
            cell.className = 'color-cell';
            cell.style.backgroundColor = i === differentIndex 
                ? differentColor 
                : baseColor;
            cell.dataset.isDifferent = i === differentIndex;
            this.elements.grid.appendChild(cell);
        }
    }

    generateColor(minValue = 0) {
        const r = minValue + Math.floor(Math.random() * (255 - minValue));
        const g = minValue + Math.floor(Math.random() * (255 - minValue));
        const b = minValue + Math.floor(Math.random() * (255 - minValue));
        return `rgb(${r},${g},${b})`;
    }

    adjustColor(baseColor, delta) {
        const rgb = baseColor.match(/\d+/g).map(Number);
        return rgb.map(c => Math.min(c + delta, 255)).join(',');
    }

    handleCellClick(cell) {
        if (this.isPaused) return;
        
        if (cell.dataset.isDifferent === 'true') {
            this.currentLevel++;
            this.timeLeft += this.config.timePerLevel;
            this.updateLevelDisplay();
            this.generateGrid();
        } else {
            this.timeLeft = Math.max(0, this.timeLeft - 5);
        }
    }

    startTimer() {
        this.timerInterval = setInterval(() => {
            if (!this.isPaused) {
                this.timeLeft--;
                this.updateTimerDisplay();
                
                if (this.timeLeft <= 0) {
                    this.gameOver();
                }
            }
        }, 1000);
    }

    updateLevelDisplay() {
        this.elements.level.textContent = this.currentLevel + 1;
    }

    updateTimerDisplay() {
        this.elements.timer.textContent = this.timeLeft;
        this.elements.timer.classList.toggle('danger', this.timeLeft <= 10);
    }

    togglePause() {
        this.isPaused = !this.isPaused;
        this.elements.overlay.style.display = this.isPaused ? 'flex' : 'none';
    }

    gameOver() {
        clearInterval(this.timerInterval);
        this.elements.overlay.style.display = 'flex';
        this.elements.grid.innerHTML = '';
    }

    resetGame() {
        clearInterval(this.timerInterval);
        this.elements.overlay.style.display = 'none';
        document.querySelector('.game-page').classList.remove('active');
        document.querySelector('.start-page').classList.add('active');
        this.timeLeft = this.config.totalTime;
        this.currentLevel = 0;
        this.updateLevelDisplay();
        this.updateTimerDisplay();
    }
}

// 初始化游戏
new ColorGame();