// Language Configuration
const i18n = {
    en: {
        'page-title': 'Color Match',
        'game-title': 'Color Match',
        'game-instructions': 'Find the different colored block among all the blocks',
        'start-game': 'Start Game',
        'level-label': 'Level:',
        'pause-btn': 'Pause',
        'resume-btn': 'Resume',
        'restart-btn': 'Play Again',
        'pause-title': 'Game Paused',
        'game-over-title': 'Game Over! Final Level:'
    },
    zh: {
        'page-title': '颜色辨异',
        'game-title': '颜色辨异',
        'game-instructions': '找出所有色块中颜色不同的一个',
        'start-game': '开始游戏',
        'level-label': '关卡:',
        'pause-btn': '暂停',
        'resume-btn': '继续游戏',
        'restart-btn': '再来一局',
        'pause-title': '游戏暂停',
        'game-over-title': '游戏结束！最终关卡:'
    }
};

class ColorGame {
    constructor() {
        this.config = {
            totalTime: 60,
            timePerLevel: 5,
            levelSteps: [2,3,4,5,5,6,6,7,7,7,8,8,8,8,8,8,9]
        };

        this.elements = {
            grid: document.querySelector('.color-grid'),
            level: document.querySelector('.level'),
            timer: document.querySelector('.time-left'),
            overlay: document.querySelector('.overlay'),
            pauseMenu: document.querySelector('.pause-menu'),
            gameOverMenu: document.querySelector('.game-over'),
            dialogTitle: document.querySelector('.dialog-title')
        };

        // Initialize language (default: English)
        this.currentLang = localStorage.getItem('language') || 'en';
        this.initLanguage();

        this.initEventListeners();
        this.resetGame();
    }

    initLanguage() {
        // Set initial language
        this.switchLanguage(this.currentLang, false);

        // Add language switch button listener
        const langSwitch = document.getElementById('languageSwitch');
        if (langSwitch) {
            langSwitch.addEventListener('click', () => {
                this.currentLang = this.currentLang === 'en' ? 'zh' : 'en';
                this.switchLanguage(this.currentLang, true);
            });
        }
    }

    switchLanguage(lang, saveToStorage = true) {
        if (saveToStorage) {
            localStorage.setItem('language', lang);
        }

        // Update all elements with data-i18n attribute
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            if (i18n[lang] && i18n[lang][key]) {
                element.textContent = i18n[lang][key];
            }
        });

        // Update page title
        const titleElement = document.querySelector('title[data-i18n]');
        if (titleElement) {
            const key = titleElement.getAttribute('data-i18n');
            if (i18n[lang] && i18n[lang][key]) {
                document.title = i18n[lang][key];
            }
        }

        // Update language switch button text
        const langSwitch = document.getElementById('languageSwitch');
        if (langSwitch) {
            const langText = langSwitch.querySelector('.lang-text');
            if (langText) {
                langText.textContent = lang === 'en' ? '中文' : 'English';
            }
        }

        // Update HTML lang attribute
        document.documentElement.lang = lang;

        // Store for game over message
        this.currentLang = lang;
    }

    initEventListeners() {
        const handler = 'ontouchstart' in window ? 'touchstart' : 'click';
        
        document.querySelector('.start-btn').addEventListener(handler, () => this.startGame());
        document.querySelector('.pause-btn').addEventListener(handler, () => this.togglePause());
        document.querySelector('.resume-btn').addEventListener(handler, () => this.togglePause());
        document.querySelector('.restart-btn').addEventListener(handler, () => this.resetGame());
        
        this.elements.grid.addEventListener(handler, e => {
            if (e.target.classList.contains('color-cell')) {
                this.handleCellClick(e.target);
            }
        });
    }

    startGame() {
        document.querySelector('.start-page').classList.remove('active');
        document.querySelector('.game-page').classList.add('active');
        this.isPaused = false;
        this.isGameOver = false;
        this.currentLevel = 0;
        this.bonusTime = 0;
        this.timeLeft = this.config.totalTime;
        this.updateTimerDisplay();
        this.generateGrid();
        this.startTimer();
    }

    generateGrid() {
        const size = this.config.levelSteps[this.currentLevel] || 9;
        const totalCells = size * size;
        const differentIndex = Math.floor(Math.random() * totalCells);

        // 使用更科学的颜色差异算法，根据关卡动态调整难度
        const difficulty = Math.max(15, 50 - this.currentLevel * 2);
        const baseColor = this.generateColor(50);
        const differentColor = this.adjustColor(baseColor, difficulty);

        this.elements.grid.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
        this.elements.grid.innerHTML = '';

        for (let i = 0; i < totalCells; i++) {
            const cell = document.createElement('div');
            cell.className = 'color-cell';
            cell.style.backgroundColor = i === differentIndex
                ? differentColor
                : baseColor;
            cell.dataset.isDifferent = i === differentIndex;
            this.elements.grid.appendChild(cell);
        }
    }

    generateColor(minValue = 0) {
        const r = minValue + Math.floor(Math.random() * (255 - minValue));
        const g = minValue + Math.floor(Math.random() * (255 - minValue));
        const b = minValue + Math.floor(Math.random() * (255 - minValue));
        return `rgb(${r},${g},${b})`;
    }

    adjustColor(baseColor, delta) {
        const rgb = baseColor.match(/\d+/g).map(Number);
        const adjusted = rgb.map(c => Math.min(255, Math.max(0, c + delta)));
        return `rgb(${adjusted.join(',')})`;
    }

    handleCellClick(cell) {
        if (this.isPaused || this.isGameOver) return;

        if (cell.dataset.isDifferent === 'true') {
            // 正确点击 - 绿色闪烁效果
            cell.style.transform = 'scale(0.9)';
            cell.style.filter = 'brightness(1.5)';
            setTimeout(() => {
                this.currentLevel++;
                this.bonusTime += this.config.timePerLevel;
                this.updateLevelDisplay();
                this.generateGrid();
            }, 150);
        } else {
            // 错误点击 - 红色闪烁效果和震动
            cell.style.animation = 'shake 0.3s';
            cell.style.border = '2px solid #ff0000';
            this.bonusTime = Math.max(-this.config.totalTime, this.bonusTime - 5);
            this.updateTimerDisplay();

            setTimeout(() => {
                cell.style.animation = '';
                cell.style.border = 'none';
            }, 300);
        }
    }

    startTimer() {
        this.startTime = Date.now();
        this.pausedTime = 0;

        this.timerInterval = setInterval(() => {
            if (!this.isPaused) {
                const elapsed = Math.floor((Date.now() - this.startTime - this.pausedTime) / 1000);
                this.timeLeft = Math.max(0, this.config.totalTime + this.bonusTime - elapsed);
                this.updateTimerDisplay();

                if (this.timeLeft <= 0) {
                    this.gameOver();
                }
            }
        }, 100); // 更频繁地检查以提高精度
    }

    updateLevelDisplay() {
        this.elements.level.textContent = this.currentLevel + 1;
    }

    updateTimerDisplay() {
        this.elements.timer.textContent = this.timeLeft;
        this.elements.timer.classList.toggle('danger', this.timeLeft <= 10);
    }

    togglePause() {
        if (this.isGameOver) return;

        this.isPaused = !this.isPaused;

        if (this.isPaused) {
            this.pauseStartTime = Date.now();
            this.elements.pauseMenu.style.display = 'block';
            this.elements.gameOverMenu.style.display = 'none';
        } else {
            if (this.pauseStartTime) {
                this.pausedTime += Date.now() - this.pauseStartTime;
            }
        }

        this.elements.overlay.style.display = this.isPaused ? 'flex' : 'none';
    }

    gameOver() {
        this.isGameOver = true;
        clearInterval(this.timerInterval);

        // 显示游戏结束界面
        this.elements.pauseMenu.style.display = 'none';
        this.elements.gameOverMenu.style.display = 'block';

        // 显示最终关卡（使用当前语言）
        const finalLevel = this.currentLevel + 1;
        const gameOverTitle = this.elements.gameOverMenu.querySelector('.dialog-title');
        if (gameOverTitle) {
            const prefix = i18n[this.currentLang]['game-over-title'];
            gameOverTitle.textContent = `${prefix} ${finalLevel}`;
        }

        this.elements.overlay.style.display = 'flex';
        this.elements.grid.innerHTML = '';
    }

    resetGame() {
        clearInterval(this.timerInterval);
        this.elements.overlay.style.display = 'none';
        document.querySelector('.game-page').classList.remove('active');
        document.querySelector('.start-page').classList.add('active');
        this.timeLeft = this.config.totalTime;
        this.currentLevel = 0;
        this.updateLevelDisplay();
        this.updateTimerDisplay();
    }
}

// 初始化游戏
new ColorGame();